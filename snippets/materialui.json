{
	"simple Modal": {
		"prefix": "mui-modal-simple",
		"body": [
			"${4:handleClose} = () => {",
			"this.setState({ ${3:open}: false });",
			"};",
			"<Modal",
			"\taria-labelledby=\"${1:simple-modal-title}\"",
			"\taria-describedby=\"${2:simple-modal-description}\"",
			"\topen={this.state.${3:open}}",
			"\tonClose={this.${4:handleClose}}",
			">",
			"\t<div> ",
			"\t\t${5:Define your content here}",
			"\t</div>",
			"</Modal>"
		],
		"description": "simple Modal"
	},
	"simple Popover": {
		"prefix": "mui-popover-simple",
		"body": [
			"${4:handleClose} = () => {",
			"this.setState({",
			"${3:anchorEl}: null,",
			"});",
			"};",
			"<Popover",
			"\tid=\"${1:simple-popover}\"",
			"\topen={${2:open}}",
			"\tanchorEl={${3:anchorEl}}",
			"\tonClose={this.${4:handleClose}}",
			"\tanchorOrigin={{",
			"\t\tvertical: \"bottom\",",
			"\t\thorizontal: \"center\",",
			"\t}}",
			"\ttransformOrigin={{",
			"\t\tvertical: \"top\",",
			"\t\thorizontal: \"center\",",
			"\t}}",
			">",
			"\t<Typography className={${0}}>The content of the Popover.</Typography>",
			"</Popover>"
		],
		"description": "Simple Popover"
	},
	"Simple App bar": {
		"prefix": "mui-appbar-simple",
		"body": [
			"<AppBar position=\"static\" color=\"${1:default}\">",
			"\t<Toolbar>",
			"\t\t<Typography variant=\"${2:title}\">",
			"\t\t\t${4:Content}",
			"\t\t</Typography>",
			"\t</Toolbar>",
			"</AppBar>"
		],
		"description": "App Bar simple"
	},
	"AppBar with button": {
		"prefix": "mui-appbar-button",
		"body": [
			"<AppBar position=\"static\">",
			"\t<Toolbar>",
			"\t\t<IconButton className={${1}} color=\"${2:inherit}\" aria-label=\"${3:Menu}\">",
			"\t\t\t<MenuIcon />",
			"\t\t</IconButton>",
			"\t\t<Typography variant=\"${4:title}\" className={${6}}>",
			"\t\t\t${7:News}",
			"\t\t</Typography>",
			"\t\t<Button color=\"${8:inherit}\">${0:Login}</Button>",
			"\t</Toolbar>",
			"</AppBar>"
		],
		"description": "App bar with button"
	},
	"App Bar with menu": {
		"prefix": "mui-appbar-menu",
		"body": [
			"${6:handleMenu} = event => {",
			"this.setState({ ${8:anchorEl}: event.currentTarget });",
			"};",
			"${0:handleClose} = () => {",
			"this.setState({ ${8:anchorEl}: null });",
			"};",
			"<AppBar position=\"static\">",
			"\t<Toolbar>",
			"\t\t<IconButton className={${1}} color=\"${2:inherit}\"aria-label=\"${3:Menu}\">",
			"\t\t\t<MenuIcon />",
			"\t\t</IconButton>",
			"\t\t<Typography variant=\"${4:title}\" color=\"${2:inherit}\" className={${5}}>",
			"\t\t\t${6:Photos}",
			"\t\t</Typography>",
			"\t\t\t<div>",
			"\t\t\t\t<IconButton",
			"\t\t\t\t\taria-owns={open ? 'menu-appbar' : null}",
			"\t\t\t\t\taria-haspopup=\"true\"",
			"\t\t\t\t\tonClick={this.${7:handleMenu}}",
			"\t\t\t\t\tcolor=\"${2:inherit}\"",
			"\t\t\t\t>",
			"\t\t\t\t\t<AccountCircle />",
			"\t\t\t\t</IconButton>",
			"\t\t\t\t<Menu",
			"\t\t\t\t\tid=\"menu-appbar\"",
			"\t\t\t\t\tanchorEl={${8:anchorEl}}",
			"\t\t\t\t\tanchorOrigin={{",
			"\t\t\t\t\t\tvertical: 'top',",
			"\t\t\t\t\t\thorizontal: 'right',",
			"\t\t\t\t\t}}",
			"\t\t\t\t\ttransformOrigin={{",
			"\t\t\t\t\t\tvertical: 'top',",
			"\t\t\t\t\t\thorizontal: 'right',",
			"\t\t\t\t\t}}",
			"\t\t\t\t\topen={open}",
			"\t\t\t\t\tonClose={this.${0:handleClose}}",
			"\t\t\t\t>",
			"\t\t\t\t\t<MenuItem onClick={this.${0:handleClose}}>Profile</MenuItem>",
			"\t\t\t\t\t<MenuItem onClick={this.${0:handleClose}}>My account</MenuItem>",
			"\t\t\t\t</Menu>",
			"\t\t\t\t</div>",
			"\t\t</Toolbar>",
			"</AppBar>"
		],
		"description": "App bar with menu"
	},
	"Avatar simple": {
		"prefix": "mui-avatar-simple",
		"body": [
			"<Avatar alt=\"${1:Remy Sharp}\" src=\"${2:/static/images/remy.jpg}\" className={${3}} />"
		],
		"description": "simple Avatar"
	},
	"Avatar with Icon": {
		"prefix": "mui-avatar-icon",
		"body": [
			"<Avatar className={${1:classes.avatar}}>",
			"\t<${0:FolderIcon} />",
			"</Avatar>"
		],
		"description": "Avatar with Icon"
	},
	"Badges": {
		"prefix": "mui-badges",
		"body": [
			"<Badge className={${1}} badgeContent={${2:4}} color=\"${3:primary}\">",
			"\t<${4:MailIcon} />",
			"</Badge>"
		],
		"description": "Badges"
	},
	"Bottom Navigation": {
		"prefix": "mui-botnav",
		"body": [
			"${2:handleChange} = (event, ${1:value}) => {",
			"\tthis.setState({ ${1:value} });",
			"};",
			"<BottomNavigation",
			"\tvalue={${1:value}}",
			"\tonChange={this.${2:handleChange}}",
			"\tshowLabels",
			"\tclassName={${3}}",
			">",
			"\t<BottomNavigationAction label=\"${4:Recents}\" icon={<${5:RestoreIcon} />} />",
			"</BottomNavigation>"
		],
		"description": "Bottom Navigation"
	},
	"Button": {
		"prefix": "mui-btn",
		"body": [
			"<Button variant=\"${1:contained}\" color=\"${2:primary}\" className={${3}}>",
			"\t${2:Primary}",
			"</Button>"
		],
		"description": "Button"
	},
	"Floating Button": {
		"prefix": "mui-btn-float",
		"body": [
			"<Button variant=\"${1:fab}\" color=\"${2:primary}\" aria-label=\"${3:Add}\" className={${4}}>",
			"\t<${3:Add}Icon />",
			"</Button>"
		],
		"description": "Floating Button"
	},
	"Icon Button": {
		"prefix": "mui-btn-icon",
		"body": [
			"<IconButton className={${1}} aria-label=\"${2:Delete}\">",
			"\t<${2:Delete}Icon />",
			"</IconButton>"
		],
		"description": "Icon Button"
	},
	"Simple Card": {
		"prefix": "mui-card-simple",
		"body": [
			"<Card className={${1}}>",
			"    <CardContent>",
			"        <Typography className={${2}} color=\"${3:textSecondary}\">",
			"            ${4:content here}",
			"        </Typography>",
			"    </CardContent>",
			"    <CardActions>",
			"        <Button variant=\"${5:contained}\" size=\"${6:small}\">${7:Learn More}</Button>",
			"    </CardActions>",
			"</Card>"
		],
		"description": "Simple Card"
	},
	"Media card": {
		"prefix": "mui-card-media",
		"body": [
			"<Card className={${1}}>",
			"    <CardActionArea>",
			"        <CardMedia",
			"            className={${2}}",
			"            image=\"${3:/static/images/cards/contemplative-reptile.jpg}\"",
			"            title=\"${4:{Contemplative Reptile}\"",
			"        />",
			"        <CardContent>",
			"            <Typography gutterBottom variant=\"${5:headline}\" component=\"${6:h2}\">",
			"                ${7:Lizard}",
			"          </Typography>",
			"            <Typography component=\"${7:p}\">",
			"                ${8:Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging}",
			"            ${8:across all continents except Antarctica}",
			"          </Typography>",
			"        </CardContent>",
			"    </CardActionArea>",
			"    <CardActions>",
			"        <Button size=\"small\" color=\"${9:primary}\">",
			"            ${10:Share}",
			"        </Button>",
			"        <Button size=\"small\" color=\"${11:primary}\">",
			"            ${0:Learn More}",
			"        </Button>",
			"    </CardActions>",
			"</Card>"
		],
		"description": "Media card"
	},
	"Dialog simple": {
		"prefix": "mui-dlg-simple",
		"body": [
			"${3:handleClose} = () => {",
			"    this.props.${1:onClose}(this.props.${2:selectedValue});",
			"};",
			"",
			"${6:handleListItemClick} = value => {",
			"    this.props.${1:onClose}(value);",
			"};",
			"<Dialog onClose={this.${3:handleClose}} aria-labelledby=\"${4:simple-dialog-title}\" {...other}>",
			"    <DialogTitle id=\"${4:simple-dialog-title}\">${5:Set backup account}</DialogTitle>",
			"    <div>",
			"        <List>",
			"            <ListItem button onClick={() => this.${6:handleListItemClick}('addAccount')}>",
			"                <ListItemAvatar>",
			"                    <Avatar>",
			"                        <${7:Add}Icon />",
			"                    </Avatar>",
			"                </ListItemAvatar>",
			"                <ListItemText primary=\"${8:add account}\" />",
			"            </ListItem>",
			"        </List>",
			"    </div>",
			"</Dialog>"
		],
		"description": "Dialog simple"
	},
	"Alert Dialog": {
		"prefix": "mui-dlg-alert",
		"body": [
			"${2:handleClose} = () => {",
			"    this.setState({ ${1:open}: false });",
			"};",
			"<Dialog",
			"    open={this.state.${1:open}}",
			"    onClose={this.${2:handleClose}}",
			"    aria-labelledby=\"${3:alert-dialog-title}\"",
			"    aria-describedby=\"${4:alert-dialog-description}\"",
			">",
			"    <DialogTitle id=\"${3:alert-dialog-title}\">{\"${5:Use Google's location service?}\"}</DialogTitle>",
			"    <DialogContent>",
			"        <DialogContentText id=\"${4:alert-dialog-description}\">",
			"            ${6:Let Google help apps determine location. This means sending anonymous location data to}",
			"              ${6:Google, even when no apps are running.}",
			"            </DialogContentText>",
			"    </DialogContent>",
			"    <DialogActions>",
			"        <Button onClick={this.${2:handleClose}} color=\"${7:primary\"}>",
			"            ${8:Disagree}",
			"            </Button>",
			"        <Button onClick={this.${2:handleClose}} color=\"${7:primary\"} autoFocus>",
			"            ${0:Agree}",
			"            </Button>",
			"    </DialogActions>",
			"</Dialog>"
		],
		"description": "Alert Dialog"
	},
	"Full screen Dialog": {
		"prefix": "mui-dlg-fullscreen",
		"body": [
			"${2:handleClose} = () => {",
			"    this.setState({ ${1:open}: false });",
			"};",
			"<Dialog",
			"    fullScreen",
			"    open={this.state.${1:open}}",
			"    onClose={this.${2:handleClose}}",
			"    TransitionComponent={Transition}",
			">",
			"    <AppBar className={${3}}>",
			"        <Toolbar>",
			"            <IconButton color=\"${4:inherit}\" onClick={this.${2:handleClose}} aria-label=\"${5:Close}\">",
			"                <${5:Close}Icon />",
			"            </IconButton>",
			"            <Typography variant=\"${6:headline}\" color=\"${4:inherit}\" className={${7}}>",
			"                ${8:Sound}",
			"              </Typography>",
			"            <Button color=\"${4:inherit}\" onClick={this.${2:handleClose}}>",
			"                ${9:save}",
			"              </Button>",
			"        </Toolbar>",
			"    </AppBar>",
			"    <List>",
			"        <ListItem button>",
			"            <ListItemText primary=\"${10:Phone ringtone}\" secondary=\"${11:Titania}\" />",
			"        </ListItem>",
			"        <Divider />",
			"        <ListItem button>",
			"            <ListItemText primary=\"${12:Default notification ringtone}\" secondary=\"${0:Tethys}\" />",
			"        </ListItem>",
			"    </List>",
			"</Dialog>"
		],
		"description": "Full screen Dialog"
	},
	"Form Dialog": {
		"prefix": "mui-dlg-form",
		"body": [
			"${2:handleClose} = () => {",
			"    this.setState({ ${1:open}: false });",
			"};",
			"<Dialog",
			"    open={this.state.${1:open}}",
			"    onClose={this.${2:handleClose}}",
			"    aria-labelledby=\"${3:form-dialog-title}\"",
			">",
			"    <DialogTitle id=\"${3:form-dialog-title}\">${4:Subscribe}</DialogTitle>",
			"    <DialogContent>",
			"        <DialogContentText>",
			"            ${5:To subscribe to this website, please enter your email address here. We will send}",
			"              ${5:updates occasionally.}",
			"            </DialogContentText>",
			"        <TextField",
			"            autoFocus",
			"            margin=\"dense\"",
			"            id=\"${6:name}\"",
			"            label=\"${0:Email Address}\"",
			"            type=\"email\"",
			"            fullWidth",
			"        />",
			"    </DialogContent>",
			"    <DialogActions>",
			"        <Button onClick={${2:this.handleClose}} color=\"primary\">",
			"            Cancel",
			"            </Button>",
			"        <Button onClick={${2:this.handleClose}} color=\"primary\">",
			"            Subscribe",
			"            </Button>",
			"    </DialogActions>",
			"</Dialog>"
		],
		"description": "Form Dialog"
	},
	"Responsive Dialog": {
		"prefix": "mui-dlg-responsive",
		"body": [
			"${2:handleClose }= () => {",
			"    this.setState({ ${1:open}: false });",
			"};",
			"<Dialog",
			"    fullScreen={fullScreen}",
			"    open={this.state.${1:open}}",
			"    onClose={this.${2:handleClose}}",
			"    aria-labelledby=\"${3:responsive-dialog-title}\"",
			">",
			"    <DialogTitle id=\"${3:responsive-dialog-title}\">{\"${4:Use Google's location service?\"}}</DialogTitle>",
			"    <DialogContent>",
			"        <DialogContentText>",
			"            ${5:Let Google help apps determine location. This means sending anonymous location data to}",
			"              ${5:Google, even when no apps are running.}",
			"            </DialogContentText>",
			"    </DialogContent>",
			"    <DialogActions>",
			"        <Button onClick={this.${2:handleClose}} color=\"${6:primary}\">",
			"            ${7:Disagree}",
			"            </Button>",
			"        <Button onClick={this.${2:handleClose}} color=\"${6:primary}\" autoFocus>",
			"            ${0:Agree}",
			"            </Button>",
			"    </DialogActions>",
			"</Dialog>"
		],
		"description": "Responsive Dialog"
	},
	"Dialog scroll paper": {
		"prefix": "mui-dlg-scroll-paper",
		"body": [
			"${2:handleClose }= () => {",
			"    this.setState({ ${1:open}: false });",
			"};",
			"<Dialog",
			"    open={this.state.${1:open}}",
			"    onClose={this.${2:handleClose}}",
			"    scroll=\"paper\"",
			"    aria-labelledby=\"${3:scroll-dialog-title}\"",
			">",
			"    <DialogTitle id=\"${3:scroll-dialog-title}\">Subscribe</DialogTitle>",
			"    <DialogContent>",
			"        <DialogContentText>",
			"            ${4:Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac}",
			"            ${4:Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.}",
			"            </DialogContentText>",
			"    </DialogContent>",
			"    <DialogActions>",
			"        <Button onClick={this.${2:handleClose}} color=\"primary\">",
			"            ${6:Cancel}",
			"            </Button>",
			"        <Button onClick={this.${2:handleClose}} color=\"primary\">",
			"            ${0:Subscribe}",
			"            </Button>",
			"    </DialogActions>",
			"</Dialog>"
		],
		"description": "Dialog scroll paper"
	},
	"Dialog scroll body": {
		"prefix": "mui-dlg-scroll-body",
		"body": [
			"${2:handleClose }= () => {",
			"    this.setState({ ${1:open}: false });",
			"};",
			"<Dialog",
			"    open={this.state.${1:open}}",
			"    onClose={this.${2:handleClose}}",
			"    scroll=\"body\"",
			"    aria-labelledby=\"${3:scroll-dialog-title}\"",
			">",
			"    <DialogTitle id=\"${3:scroll-dialog-title}\">Subscribe</DialogTitle>",
			"    <DialogContent>",
			"        <DialogContentText>",
			"            ${4:Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac}",
			"            ${4:Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.}",
			"            </DialogContentText>",
			"    </DialogContent>",
			"    <DialogActions>",
			"        <Button onClick={this.${2:handleClose}} color=\"primary\">",
			"            ${6:Cancel}",
			"            </Button>",
			"        <Button onClick={this.${2:handleClose}} color=\"primary\">",
			"            ${0:Subscribe}",
			"            </Button>",
			"    </DialogActions>",
			"</Dialog>"
		],
		"description": "Dialog scroll body"
	},
	"Divider Light": {
		"prefix": "mui-divider-light",
		"body": [
			" <Divider light />"
		],
		"description": "Divider Light"
	},
	"Divider inset": {
		"prefix": "mui-divider-inset",
		"body": [
			" <Divider inset />"
		],
		"description": "Divider inset"
	},
	"Expansion Panel": {
		"prefix": "mui-exp-panel",
		"body": [
			"<ExpansionPanel>",
			"    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>",
			"        <Typography className={${1}}>${2:Expansion Panel 1}</Typography>",
			"    </ExpansionPanelSummary>",
			"    <ExpansionPanelDetails>",
			"        <Typography>",
			"            ${0:Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,}",
			"            ${0:sit amet blandit leo lobortis eget.}",
			"          </Typography>",
			"    </ExpansionPanelDetails>",
			"</ExpansionPanel>"
		],
		"description": "Expansion Panel"
	},
	"Simple List ": {
		"prefix": "mui-list-simple",
		"body": [
			"<List component=\"${1:nav}\">",
			"    <ListItem button>",
			"        <ListItemIcon>",
			"            <${0:Inbox}Icon />",
			"        </ListItemIcon>",
			"        <ListItemText primary=\"${0:Inbox}\" />",
			"    </ListItem>",
			"</List>"
		],
		"description": "Simple List "
	},
	"Folder List ": {
		"prefix": "mui-list-folder",
		"body": [
			"<List>",
			"    <ListItem>",
			"        <Avatar>",
			"            <${1:Image}Icon />",
			"        </Avatar>",
			"        <ListItemText primary=\"${2:Photos}\" secondary=\"${0:Jan 9, 2014}\" />",
			"    </ListItem>",
			"</List>"
		],
		"description": "Folder List "
	},
	"Inset List ": {
		"prefix": "mui-list-inset",
		"body": [
			"<List component=\"nav\">",
			"    <ListItem button>",
			"        <ListItemIcon>",
			"            <${1:Star}Icon />",
			"        </ListItemIcon>",
			"        <ListItemText inset primary=\"${0:Chelsea Otakan}\" />",
			"    </ListItem>",
			"</List>"
		],
		"description": "Inset List "
	},
	"Nested List ": {
		"prefix": "mui-list-nested",
		"body": [
			"${2:handleClick }= () => {",
			"    this.setState(state => ({ ${4:open}: !state.${4:open} }));",
			"};",
			"<List",
			"    component=\"nav\"",
			"    subheader={<ListSubheader component=\"div\">${1:Nested List Items}</ListSubheader>}",
			">",
			"    <ListItem button onClick={this.${2:handleClick}}>",
			"        <ListItemIcon>",
			"            <${3:Inbox}Icon />",
			"        </ListItemIcon>",
			"        <ListItemText inset primary=\"${3:Inbox}\" />",
			"        {this.state.${4:open} ? <ExpandLess /> : <ExpandMore />}",
			"    </ListItem>",
			"    <Collapse in={this.state.${4:open}} timeout=\"auto\" unmountOnExit>",
			"        <List component=\"div\" disablePadding>",
			"            <ListItem button className={${5}}>",
			"                <ListItemIcon>",
			"                    <${6:StarBorder} />",
			"                </ListItemIcon>",
			"                <ListItemText inset primary=\"${0:Starred}\" />",
			"            </ListItem>",
			"        </List>",
			"    </Collapse>",
			"</List>"
		],
		"description": "Nested List "
	},
	"checkbox List ": {
		"prefix": "mui-list-checkbox",
		"body": [
			"${3:handleToggle} = value => () => {",
			"    const { ${1:checked} } = this.state;",
			"    const currentIndex = ${1:checked}.indexOf(value);",
			"    const newChecked = [...${1:checked}];",
			"",
			"    if (currentIndex === -1) {",
			"        newChecked.push(value);",
			"    } else {",
			"        newChecked.splice(currentIndex, 1);",
			"    }",
			"",
			"    this.setState({",
			"        ${1:checked}: newChecked,",
			"    });",
			"};",
			"<List>",
			"    {${2:[0, 1, 2, 3]}.map(value => (",
			"        <ListItem",
			"            key={value}",
			"            role={undefined}",
			"            dense",
			"            button",
			"            onClick={this.${3:handleToggle}(value)}",
			"            className={${4}}",
			"        >",
			"            <Checkbox",
			"                ${1:checked}={this.state.${1:checked}.indexOf(value) !== -1}",
			"                tabIndex={-1}",
			"                disableRipple",
			"            />",
			"            <ListItemText primary={`Line item \\${value + 1\\}`} /> ",
			"            <ListItemSecondaryAction>",
			"                <IconButton aria-label=\"${0:Comments}\">",
			"                    <CommentIcon />",
      "                </IconButton>",
			"            </ListItemSecondaryAction>",
			"        </ListItem>",
			"    ))}",
			"</List>"
		],
		"description": "checkbox List "
	},
	"checkbox2 List ": {
		"prefix": "mui-list-checkbox2",
		"body": [
			"${0:handleToggle} = value => () => {",
			"    const { ${1:checked} } = this.state;",
			"    const currentIndex = ${1:checked}.indexOf(value);",
			"    const newChecked = [...${1:checked}];",
			"",
			"    if (currentIndex === -1) {",
			"        newChecked.push(value);",
			"    } else {",
			"        newChecked.splice(currentIndex, 1);",
			"    }",
			"",
			"    this.setState({",
			"        ${1:checked}: newChecked,",
			"    });",
			"};",
			"",
			"<List>",
			"    {${2}.map(value => (",
			"        <ListItem key={value} dense button className={${3}}>",
			"            <Avatar alt=\"${4:Remy Sharp}\" src=\"${5:/static/images/remy.jpg}\" />",
			"            <ListItemText primary={`Line item \\${value + 1\\}`} />",
			"            <ListItemSecondaryAction>",
			"                <Checkbox",
			"                    onChange={this.${0:handleToggle}(value)}",
			"                    ${1:checked}={this.state.${1:checked}.indexOf(value) !== -1}",
			"                />",
			"            </ListItemSecondaryAction>",
			"        </ListItem>",
			"    ))}",
			"</List>"
		],
		"description": "checkbox2 List "
	},
	"switch List ": {
		"prefix": "mui-list-switch",
		"body": [
			"${1:handleToggle} = value => () => {",
			"    const { ${2:checked} } = this.state;",
			"    const currentIndex = ${2:checked}.indexOf(value);",
			"    const newChecked = [...${2:checked}];",
			"",
			"    if (currentIndex === -1) {",
			"        newChecked.push(value);",
			"    } else {",
			"        newChecked.splice(currentIndex, 1);",
			"    }",
			"",
			"    this.setState({",
			"        ${2:checked}: newChecked,",
			"    });",
			"};",
			"<List subheader={<ListSubheader>${3:Settings}</ListSubheader>}>",
			"    <ListItem>",
			"        <ListItemIcon>",
			"            <${4:Wifi}Icon />",
			"        </ListItemIcon>",
			"        <ListItemText primary=\"${4:WiFi}\" />",
			"        <ListItemSecondaryAction>",
			"            <Switch",
			"                onChange={this.${1:handleToggle}('${0:wifi}')}",
			"                ${2:checked}={this.state.${2:checked}.indexOf('${0:wifi}') !== -1}",
			"            />",
			"        </ListItemSecondaryAction>",
			"    </ListItem>",
			"</List>"
		],
		"description": "switch List "
	},
	"simple menu": {
		"prefix": "mui-menu-simple",
		"body": [
			"${1:handleClose }= event => {",
			"    if (this.${2:anchorEl}.contains(event.target)) {",
			"        return;",
			"    }",
			"",
			"    this.setState({ ${3:open}: false });",
			"};",
			"<Popper open={${3:open}} anchorEl={this.${2:anchorEl}} transition disablePortal>",
			"    {({ TransitionProps, placement }) => (",
			"        <Grow",
			"            {...TransitionProps}",
			"            id=\"${4:menu-list-grow}\"",
			"            style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}",
			"        >",
			"            <Paper>",
			"                <ClickAwayListener onClickAway={this.${1:handleClose}}>",
			"                    <MenuList>",
			"                        <MenuItem onClick={this.${1:handleClose}}>${5:Profile}</MenuItem>",
			"                        <MenuItem onClick={this.${1:handleClose}}>${6:My account}</MenuItem>",
			"                        <MenuItem onClick={this.${1:handleClose}}>${0:Logout}</MenuItem>",
			"                    </MenuList>",
			"                </ClickAwayListener>",
			"            </Paper>",
			"        </Grow>",
			"    )}",
			"</Popper>"
		],
		"description": "simple menu"
	},
	"Paper": {
		"prefix": "mui-paper",
		"body": [
			"<Paper className={${1}} elevation={${2:1}}>",
			"    <Typography variant=\"${3:headline}\" component=\"${4:h3}\">",
			"        ${0:Your content here.}",
			"     </Typography>",
			"</Paper>"
		],
		"description": "Paper"
	},
	"Date Picker": {
		"prefix": "mui-datepicker",
		"body": [
			"<TextField",
			"    id=\"${1:date}\"",
			"    label=\"${2:Birthday}\"",
			"    type=\"date\"",
			"    defaultValue=\"${3:2017-05-24}\"",
			"    className={${0}}",
			"    InputLabelProps={{",
			"        shrink: true,",
			"    }}",
			"/>"
		],
		"description": "Date Picker"
	},
	"Time Picker": {
		"prefix": "mui-timepicker",
		"body": [
			"<TextField",
			"    id=\"${1:time}\"",
			"    label=\"${2:Alarm clock}\"",
			"    type=\"time\"",
			"    defaultValue=\"${3:07:30}\"",
			"    className={${4}}",
			"    InputLabelProps={{",
			"        shrink: true,",
			"    }}",
			"    inputProps={{",
			"        step: ${0:300}, // 5 min",
			"    }}",
			"/>"
		],
		"description": "Time Picker"
	},
	"DateTime Picker": {
		"prefix": "mui-datetimepicker",
		"body": [
			"<TextField",
			"    id=\"${1:datetime-local}\"",
			"    label=\"${2:Next appointment}\"",
			"    type=\"datetime-local\"",
			"    defaultValue=\"${3:2017-05-24T10:30}\"",
			"    className={${0}}",
			"    InputLabelProps={{",
			"        shrink: true,",
			"    }}",
			"/>"
		],
		"description": "DateTime Picker"
	},
	"circular progress": {
		"prefix": "mui-progress-circular",
		"body": [
			" <CircularProgress className={${1}}  size={${2:50}} color=\"${0:secondary}\" />"
		],
		"description": "circular progress"
	},
	"checkbox": {
		"prefix": "mui-checkbox",
		"body": [
			"${1:handleChange} = name => event => {",
			"    this.setState({ [name]: event.target.checked });",
			"};",
			"<FormControlLabel",
			"    control={",
			"        <Checkbox",
			"            checked={this.state.${2:checkedB}}",
			"            onChange={this.${1:handleChange}('${2:checkedB}')}",
			"            value=\"${2:checkedB}\"",
			"            color=\"${3:primary}\"",
			"        />",
			"    }",
			"    label=\"${0:primary}\"",
			"/>"
		],
		"description": "checkbox"
	},
	"checkbox Icon": {
		"prefix": "mui-checkbox-icon",
		"body": [
			"<FormControlLabel",
			"    control={",
			"        <Checkbox icon={<${1:Favorite}Border />} checkedIcon={<${1:Favorite} />} value=\"${2:checkedH}\" />",
			"    }",
			"    label=\"${0:Custom icon}\"",
			"/>"
		],
		"description": "checkbox Icon"
	},
	"Radio": {
		"prefix": "mui-radio",
		"body": [
			"${1:handleChange }= event => {",
			"    this.setState({ ${2:value}: event.target.value });",
			"};",
			"<RadioGroup",
			"    aria-label=\"Gender\"",
			"    name=\"gender1\"",
			"    className={classes.group}",
			"    value={this.state.${2:value}}",
			"    onChange={this.${1:handleChange}}",
			">",
			"    <FormControlLabel value=\"${3:female}\" control={<Radio />} label=\"${4:Female}\" />",
			"    <FormControlLabel value=\"${5:male}\" control={<Radio />} label=\"${0:Male}\" />",
			"</RadioGroup>"
		],
		"description": "Radio"
	},
	"Switch": {
		"prefix": "mui-switch",
		"body": [
			"${1:handleChange} = name => event => {",
			"    this.setState({ [name]: event.target.checked });",
			"};",
			"<FormGroup>",
			"    <FormControlLabel",
			"        control={",
			"            <Switch",
			"                checked={this.state.${2:gilad}}",
			"                onChange={this.${1:handleChange}('${3:gilad}')}",
			"                value=\"${3:gilad}\"",
			"            />",
			"        }",
			"        label=\"${0:Gilad Gray}\"",
			"    />",
			"</FormGroup>"
		],
		"description": "Switch"
	},
	"Select": {
		"prefix": "mui-select",
		"body": [
			"${1:handleChange }= event => {",
			"    this.setState({ [event.target.name]: event.target.value });",
			"};",
			"<FormControl className={${2}}>",
			"    <InputLabel htmlFor=\"${3:age-helper}\">${4:Age}</InputLabel>",
			"    <Select",
			"        value={this.state.${5:age}}",
			"        onChange={this.${1:handleChange}}",
			"        input={<Input name=\"${5:age}\" id=\"${3:age-helper}\" />}",
			"    >",
			"        <MenuItem value=\"\">",
			"            <em>None</em>",
			"        </MenuItem>",
			"        <MenuItem value={${6:10}}>${7:Ten}</MenuItem>",
			"        <MenuItem value={${8:20}}>${0:Twenty}</MenuItem>",
			"    </Select>",
			"</FormControl>"
		],
		"description": "Select"
	},
	"NativeSelect": {
		"prefix": "mui-select-native",
		"body": [
			"${1:handleChange }= event => {",
			"    this.setState({ [event.target.name]: event.target.value });",
			"};",
			"<FormControl className={${2}}>",
			"    <InputLabel htmlFor=\"${3:age-helper}\">${4:Age}</InputLabel>",
			"    <NativeSelect",
			"        value={this.state.${5:age}}",
			"        onChange={this.${1:handleChange}}",
			"        input={<Input name=\"${5:age}\" id=\"${3:age-helper}\" />}",
			"    >",
			"        <MenuItem value=\"\">",
			"            <em>None</em>",
			"        </MenuItem>",
			"        <MenuItem value={${6:10}}>${7:Ten}</MenuItem>",
			"        <MenuItem value={${8:20}}>${0:Twenty}</MenuItem>",
			"    </NativeSelect>",
			"</FormControl>"
		],
		"description": "NativeSelect"
	},
	"Snackbar": {
		"prefix": "mui-snackbar",
		"body": [
			"${1:handleClose} = (event, reason) => {",
			"    if (reason === 'clickaway') {",
			"        return;",
			"    }",
			"",
			"    this.setState({ ${2:open}: false });",
			"};",
			"<Snackbar",
			"    anchorOrigin={{",
			"        vertical: 'bottom',",
			"        horizontal: 'left',",
			"    }}",
			"    open={this.state.${2:open}}",
			"    autoHideDuration={${3:6000}}",
			"    onClose={this.${1:handleClose}}",
			">",
			"</Snackbar>"
		],
		"description": "Snackbar"
	},
	"Carousel": {
		"prefix": "mui-carousel",
		"body": [
			"${1:handleNext }= () => {",
			"    this.setState(prevState => ({",
			"        ${2:activeStep}: prevState.${2:activeStep} + 1,",
			"    }));",
			"};",
			"",
			"${3:handleBack }= () => {",
			"    this.setState(prevState => ({",
			"        ${2:activeStep}: prevState.${2:activeStep} - 1,",
			"    }));",
			"};",
			"",
			"${4:handleStepChange} = ${2:activeStep} => {",
			"    this.setState({ ${2:activeStep} });",
			"};",
			"<SwipeableViews",
			"    axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}",
			"    index={this.state.${2:activeStep}}",
			"    onChangeIndex={this.${4:handleStepChange}}",
			"    enableMouseEvents",
			">",
			"    {${5:tutorialSteps}.map(step => (",
			"        <img key={step.label} className={classes.img} src={step.imgPath} alt={step.label} />",
			"    ))}",
			"</SwipeableViews>",
			"    <MobileStepper",
			"        steps={${6:maxSteps}}",
			"        position=\"static\"",
			"        activeStep={${2:activeStep}}",
			"        className={${7}}",
			"        nextButton={",
			"            <Button size=\"small\" onClick={this.${1:handleNext}} disabled={${2:activeStep} === ${6:maxSteps} - 1}>",
			"                ${8:Next}",
			"              {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}",
			"            </Button>",
			"        }",
			"        backButton={",
			"            <Button size=\"small\" onClick={this.${3:handleBack}} disabled={${2:activeStep} === 0}>",
			"                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}",
			"                ${0:Back}",
			"            </Button>",
			"        }",
			"    />"
		],
		"description": "Carousel"
	},
	"table": {
		"prefix": "mui-table",
		"body": [
			"<Paper className={${1}}>",
			"    <Table className={${2}}>",
			"        <TableHead>",
			"            <TableRow>",
			"                <TableCell>${3:Dessert (100g serving)}</TableCell>",
			"                <TableCell numeric>${4:Calories}</TableCell>",
			"                <TableCell numeric>${5:Fat (g)}</TableCell>",
			"                <TableCell numeric>${6:Carbs (g)}</TableCell>",
			"                <TableCell numeric>${7:Protein (g)}</TableCell>",
			"            </TableRow>",
			"        </TableHead>",
			"        <TableBody>",
			"            {${8:rows}.map(row => {",
			"                return (",
			"                    <TableRow key={row.id}>",
			"                        <TableCell component=\"th\" scope=\"row\">",
			"                            {row.${9:name}}",
			"                        </TableCell>",
			"                        <TableCell numeric>{row.${10:calories}}</TableCell>",
			"                        <TableCell numeric>{row.${11:fat}}</TableCell>",
			"                        <TableCell numeric>{row.${12:carbs}}</TableCell>",
			"                        <TableCell numeric>{row.${0:protein}}</TableCell>",
			"                    </TableRow>",
			"                );",
			"            })}",
			"        </TableBody>",
			"    </Table>",
			"</Paper>"
		],
		"description": "table"
	},
	"tabs": {
		"prefix": "mui-tabs",
		"body": [
			"${2:handleChange }= (event, ${1:value}) => {",
			"    this.setState({ ${1:value}});",
			"};",
			"",
			"<Tabs value={${1:value}] onChange={this.${2:handleChange}}>",
			"    <Tab label=\"${3:Item One}\" />",
			"    <Tab label=\"${4:Item Two}\" />",
			"    <Tab label=\"${5:Item Three}\" href=\"${6:#basic-tabs}\" />",
			"</Tabs>"
		],
		"description": "tabs"
	},
	"TextField": {
		"prefix": "mui-textfield",
		"body": [
			"${1:handleChange} = ${2:name} => event => {",
			"    this.setState({",
			"        [${2:name}]: event.target.value,",
			"    });",
			"};",
			"<TextField",
			"    id=\"${2:name}\"",
			"    label=\"${3:Name}\"",
			"    className={${0}}",
			"    value={this.state.${2:name}}",
			"    onChange={this.${1:handleChange}('${2:name}')}",
			"    margin=\"normal\"",
			"/>"
		],
		"description": "TextField"
	},
	"Tooltip": {
		"prefix": "mui-tooltip",
		"body": [
			"<Tooltip title=\"${1:Delete}\">",
			"    <IconButton aria-label=\"${1:Delete}\">",
			"        <${1:Delete}Icon />",
			"    </IconButton>",
			"</Tooltip>"
		],
		"description": "Tooltip"
	},
	"AppBar": {
		"prefix": "mui-appbar",
		"body": [
			"<Appbar",
			"    className=\"${1}\"",
			"    color=\"${2|primary, inherit, secondary, default|}\"",
			"    position=\"${3|fixed,absolute,sticky, static|}\"",
			">",
			"</Appbar >"
		],
		"description": "AppBar"
	},
	"Avatar": {
		"prefix": "mui-avatar",
		"body": [
			"<Avatar",
			"    alt=\"${1}\"",
			"    className=\"${2}\"",
			"    component=\"${3:div}\"",
			"    sizes=\"${4}\"",
			"    src=\"${0}\"",
			">",
			"</Avatar>"
		],
		"description": "Avatar"
	},
	"Backdrop": {
		"prefix": "mui-backdrop",
		"body": [
			"<Backdrop",
			"    className=\"${1}\"",
			"    invisible=\"${2:false}\"",
			"    open=\"${3:false}\"",
			"    transitionDuration=\"${0}\"",
			">",
			"</Backdrop>"
		],
		"description": "Backdrop"
	}
}
